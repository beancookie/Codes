#include <iostream>
using namespace std;

// 1:对齐输出
// 查看 提交 统计 提问
// 总时间限制: 1000ms 内存限制: 65536kB
// 描述
// 读入三个整数，按每个整数占8个字符的宽度，右对齐输出它们。

// 输入
// 只有一行，包含三个整数，整数之间以一个空格分开。
// 输出
// 只有一行，按照格式要求依次输出三个整数，之间以一个空格分开。
// 样例输入
// 123456789 0 -1
// 样例输出
// 123456789        0       -1
// 来源
// 习题(2-6)

// int main() {
//     int a, b, c;
//     scanf("%d %d %d", &a, &b, &c);
//     printf("%8d %8d %8d", a, b, c);
// }

// 2:输出保留12位小数的浮点数
// 查看 提交 统计 提问
// 总时间限制: 1000ms 内存限制: 65536kB
// 描述
// 读入一个双精度浮点数，保留12位小数，输出这个浮点数。

// 输入
// 只有一行，一个双精度浮点数。
// 输出
// 也只有一行，保留12位小数的浮点数。
// 样例输入
// 3.1415926535798932
// 样例输出
// 3.141592653580
// 来源
// 习题(2-3)

// int main() {
//     double p;
//     scanf("%lf", &p);
//     printf("%.12f", p);
// }

// 3:空格分隔输出
// 查看 提交 统计 提问
// 总时间限制: 1000ms 内存限制: 65536kB
// 描述
// 读入一个字符，一个整数，一个单精度浮点数，一个双精度浮点数，然后按顺序输出它们，并且要求在他们之间用一个空格分隔。输出浮点数时保留6位小数。

// 输入
// 共有四行：
// 第一行是一个字符；
// 第二行是一个整数；
// 第三行是一个单精度浮点数；
// 第四行是一个双精度浮点数。
// 输出
// 输出字符、整数、单精度浮点数和双精度浮点数，之间用空格分隔。
// 样例输入
// a
// 12
// 2.3
// 3.2
// 样例输出
// a 12 2.300000 3.200000

// int main() {
//     char a;
//     int b;
//     float c;
//     double d;
//     scanf("%c%d%f%lf", &a, &b, &c, &d);
//     printf("%c %d %.6f %.6f", a, b, c, d);
// }

// 4:计算球的体积
// 查看 提交 统计 提问
// 总时间限制: 1000ms 内存限制: 65536kB
// 描述
// 对于半径为r的球，其体积的计算公式为V=4/3*πr3，这里取π= 3.14。

// 现给定r，求V。

// 输入
// 输入为一个不超过100的非负实数，即球半径，类型为double。
// 输出
// 输出一个实数，即球的体积，保留到小数点后2位。
// 样例输入
// 4
// 样例输出
// 267.95
// 来源
// yty

int main() {
    double p;
    scanf("%lf", &p);
    printf("%.2f", 4 / 3.0 * 3.14 * p * p * p);
}

// 5:大象喝水
// 查看 提交 统计 提问
// 总时间限制: 1000ms 内存限制: 65536kB
// 描述
// 一只大象口渴了，要喝20升水才能解渴，但现在只有一个深h厘米，底面半径为r厘米的小圆桶(h和r都是整数)。问大象至少要喝多少桶水才会解渴。

// 输入
// 输入有一行：包行两个整数，以一个空格分开，分别表示小圆桶的深h和底面半径r，单位都是厘米。
// 输出
// 输出一行，包含一个整数，表示大象至少要喝水的桶数。
// 样例输入
// 23 11
// 样例输出
// 3
// 提示
// 如果一个圆桶的深为h厘米，底面半径为r厘米，那么它最多能装Pi * r * r * h立方厘米的水。(设Pi=3.14159) 
// 1升 = 1000毫升
// 1毫升 = 1 立方厘米
// 来源
// 计算概论化学学院期末考试

// int main() {
//     int h, r;
//     static double PI = 3.14159;
//     cin >> h >> r;
//     double t = 20 / (PI * r * r * h / 1000); 
//     if ( t > (int)t)
//         ++t;
//     cout << (int)t;
// }